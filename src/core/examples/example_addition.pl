file_search_path(chractr,'.').                                                                                                                                                                                                                     
:- include(chractr('actr_core.pl')).                                                                                                                                                                                                               
:- chr_constraint run/0, fire/0.                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                   
                                                                                                                                                                                                                                                   
delay-initialize-addition@fire,buffer(goal,D,A),chunk(A,add),chunk_has_slot(A,arg1,B),chunk_has_slot(A,arg2,C)==>B\==nil,C\==nil|conflict_set(rule(initialize-addition,[fire,buffer(goal,D,A),chunk(A,add),chunk_has_slot(A,arg1,B),chunk_has_slot(A,arg2,C)],[])).
initialize-addition@buffer(goal,D,A),chunk(A,add),chunk_has_slot(A,arg1,B),chunk_has_slot(A,arg2,C)\apply_rule(rule(initialize-addition,[fire,buffer(goal,D,A),chunk(A,add),chunk_has_slot(A,arg1,B),chunk_has_slot(A,arg2,C)],[]))<=>B\==nil,C\==nil|buffer_request(retrieval,chunk(_,count-order,[ (first,B)])),buffer_change(goal,chunk(_,_,[ (sum,B), (count,0)])),conflict_resolution.
delay-terminate-addition@fire,buffer(goal,D,A),chunk(A,add),chunk_has_slot(A,arg2,B),chunk_has_slot(A,count,B),chunk_has_slot(A,sum,C)==>B\==nil,C\==nil|conflict_set(rule(terminate-addition,[fire,buffer(goal,D,A),chunk(A,add),chunk_has_slot(A,arg2,B),chunk_has_slot(A,count,B),chunk_has_slot(A,sum,C)],[])).
terminate-addition@buffer(goal,D,A),chunk(A,add),chunk_has_slot(A,arg2,B),chunk_has_slot(A,count,B),chunk_has_slot(A,sum,C)\apply_rule(rule(terminate-addition,[fire,buffer(goal,D,A),chunk(A,add),chunk_has_slot(A,arg2,B),chunk_has_slot(A,count,B),chunk_has_slot(A,sum,C)],[]))<=>B\==nil,C\==nil|buffer_change(goal,chunk(_,_,[ (count,nil)])),conflict_resolution.
delay-increment-count@fire,buffer(retrieval,F,A),chunk(A,count-order),chunk_has_slot(A,second,D),chunk_has_slot(A,first,C),buffer(goal,G,B),chunk(B,add),chunk_has_slot(B,sum,E),chunk_has_slot(B,count,C)==>D\==nil,E\==nil,C\==nil|conflict_set(rule(increment-count,[fire,buffer(retrieval,F,A),chunk(A,count-order),chunk_has_slot(A,second,D),chunk_has_slot(A,first,C),buffer(goal,G,B),chunk(B,add),chunk_has_slot(B,sum,E),chunk_has_slot(B,count,C)],[])).
increment-count@buffer(retrieval,F,A),chunk(A,count-order),chunk_has_slot(A,second,D),chunk_has_slot(A,first,C),buffer(goal,G,B),chunk(B,add),chunk_has_slot(B,sum,E),chunk_has_slot(B,count,C)\apply_rule(rule(increment-count,[fire,buffer(retrieval,F,A),chunk(A,count-order),chunk_has_slot(A,second,D),chunk_has_slot(A,first,C),buffer(goal,G,B),chunk(B,add),chunk_has_slot(B,sum,E),chunk_has_slot(B,count,C)],[]))<=>D\==nil,E\==nil,C\==nil|buffer_request(retrieval,chunk(_,count-order,[ (first,E)])),buffer_change(goal,chunk(_,_,[ (count,D)])),conflict_resolution.
delay-increment-sum@fire,buffer(retrieval,G,A),chunk(A,count-order),chunk_has_slot(A,second,D),chunk_has_slot(A,first,C),buffer(goal,H,B),chunk(B,add),chunk_has_slot(B,sum,C),chunk_has_slot(B,count,E),chunk_has_slot(B,arg2,F)==>D\==nil,C\==nil,E\==nil,F\==E|conflict_set(rule(increment-sum,[fire,buffer(retrieval,G,A),chunk(A,count-order),chunk_has_slot(A,second,D),chunk_has_slot(A,first,C),buffer(goal,H,B),chunk(B,add),chunk_has_slot(B,sum,C),chunk_has_slot(B,count,E),chunk_has_slot(B,arg2,F)],[])).
increment-sum@buffer(retrieval,G,A),chunk(A,count-order),chunk_has_slot(A,second,D),chunk_has_slot(A,first,C),buffer(goal,H,B),chunk(B,add),chunk_has_slot(B,sum,C),chunk_has_slot(B,count,E),chunk_has_slot(B,arg2,F)\apply_rule(rule(increment-sum,[fire,buffer(retrieval,G,A),chunk(A,count-order),chunk_has_slot(A,second,D),chunk_has_slot(A,first,C),buffer(goal,H,B),chunk(B,add),chunk_has_slot(B,sum,C),chunk_has_slot(B,count,E),chunk_has_slot(B,arg2,F)],[]))<=>D\==nil,C\==nil,E\==nil,F\==E|buffer_request(retrieval,chunk(_,count-order,[ (first,E)])),buffer_change(goal,chunk(_,_,[ (sum,D)])),conflict_resolution.
init@run<=>true|add_buffer(retrieval,declarative_module),add_buffer(goal,declarative_module),lisp_chunktype([chunk]),lisp_chunktype([count-order,first,second]),lisp_chunktype([add,arg1,arg2,sum,count]),lisp_adddm([[a,isa,count-order,first,0,second,1],[b,isa,count-order,first,1,second,2],[c,isa,count-order,first,2,second,3],[d,isa,count-order,first,3,second,4],[e,isa,count-order,first,4,second,5],[f,isa,count-order,first,5,second,6],[g,isa,count-order,first,6,second,7],[h,isa,count-order,first,7,second,8],[i,isa,count-order,first,8,second,9],[j,isa,count-order,first,9,second,10],[second-goal,isa,add,arg1,5,arg2,2]]),lisp_goalfocus([second-goal]),set_default_utilities([increment-sum,increment-count,terminate-addition,initialize-addition]),now(0),conflict_resolution,nextcyc.
no-rule@fire<=>true|conflict_set([]),choose.
